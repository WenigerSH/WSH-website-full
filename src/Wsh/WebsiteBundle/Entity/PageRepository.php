<?php

namespace Wsh\WebsiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository
{
    public function fetchLatestMessagesFromGms($limit = 3, $userType = 'models')
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from('Weniger\GmsBundle\Entity\MessageFromGms', 'n')
            ->where("n.isPublished = true")
            ->andWhere('n.recipients in (:recipients)')
            ->orderBy('n.createdAt', 'DESC');
        $qb->setParameter('recipients', array('all', $userType));
        $query = $qb->getQuery();
        $query->setMaxResults($limit);
        return $query->getResult();
    }

    public function fetchLatestPublishedBlogPosts($limit = 3)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from('Weniger\GmsBundle\Entity\BlogPost', 'n')
            ->where("n.isPublished = true")
            ->orderBy('n.createdAt', 'DESC');
        $query = $qb->getQuery();
        $query->setMaxResults($limit);
        return $query->getResult();
    }

    public function getPagesCount()
    {
        $dql = 'SELECT COUNT(p.id) FROM WenigerGmsBundle:Page p';
        $query = $this->_em->createQuery($dql);
        return $query->getSingleScalarResult();
    }


    public function getPostsCount()
    {
        $dql = 'SELECT COUNT(p.id) FROM WenigerGmsBundle:BlogPost p';
        $query = $this->_em->createQuery($dql);
        return $query->getSingleScalarResult();
    }

    public function getNextBlogPostFor(BlogPost $post) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from('Weniger\GmsBundle\Entity\BlogPost', 'n')
            ->where("n.isPublished = true")
            ->andWhere('n.createdAt >= :currentCreated')
            ->andWhere('n.id > :current_id')
            ->orderBy('n.createdAt', 'ASC')
            ->addOrderBy('n.id', 'ASC');

        $qb->setParameter('currentCreated', $post->getCreatedAt());
        $qb->setParameter('current_id', $post->getId());

        $query = $qb->getQuery();
        $query->setMaxResults(1);
        return $query->getOneOrNullResult();
    }

    public function getPreviousBlogPostFor(BlogPost $post) {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('n')
            ->from('Weniger\GmsBundle\Entity\BlogPost', 'n')
            ->where('n.createdAt <= :current_createdAt')
            ->andWhere('n.id < :current_id')
            ->orderBy('n.createdAt', 'DESC')
            ->addOrderBy('n.id', 'DESC');
        $query = $qb->getQuery();
        $query->setParameter('current_createdAt', $post->getCreatedAt());
        $query->setParameter('current_id', $post->getId());
        $query->setMaxResults(1);
        return $query->getOneOrNullResult();
    }


}
